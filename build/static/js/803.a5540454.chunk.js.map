{"version":3,"file":"static/js/803.a5540454.chunk.js","mappings":"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","sources":["components/Loader/index.js","components/Loader/Loader.jsx","pages/SingleRecipe.jsx","shared/redux/actions/recipeActions.js","../node_modules/@contentful/rich-text-types/src/blocks.ts","../node_modules/@contentful/rich-text-types/src/inlines.ts","../node_modules/@contentful/rich-text-types/src/marks.ts","../node_modules/@contentful/rich-text-types/src/schemaConstraints.ts","../node_modules/@contentful/rich-text-types/src/emptyDocument.ts","../node_modules/@contentful/rich-text-types/src/helpers.ts","../node_modules/@contentful/rich-text-types/src/index.ts","../node_modules/@contentful/rich-text-react-renderer/src/util/nodeListToReactComponents.tsx","../node_modules/@contentful/rich-text-react-renderer/src/util/appendKeyToValidElement.ts","../node_modules/@contentful/rich-text-react-renderer/src/index.tsx"],"sourcesContent":["import Loader from './Loader.jsx';\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport './loader.css';\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className='loader'>\r\n      <div className='loader__spinner'></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useEffect } from 'react';\r\nimport '../styles/recipe.css';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchSingleRecipe } from '../shared/redux/actions/recipeActions';\r\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\r\nimport Loader from '../components/Loader';\r\n\r\nconst SingleRecipe = () => {\r\n  const { recipe, loading, error } = useSelector((state) => state.recipe);\r\n  const dispatch = useDispatch();\r\n  const { slug } = useParams();\r\n\r\n  // Fetch data finding with slug value\r\n  useEffect(() => {\r\n    dispatch(fetchSingleRecipe(slug));\r\n  }, [dispatch, slug]);\r\n\r\n  if (loading) {\r\n    return <Loader />;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>Error: {error}</p>;\r\n  }\r\n\r\n  if (!recipe) {\r\n    return null;\r\n  }\r\n\r\n  const { title, cookingTime, ingredients, featuredImage, method } =\r\n    recipe.fields;\r\n\r\n  return (\r\n    <div>\r\n      <div className='banner'>\r\n        <div className='image-box'>\r\n          <img src={`https:${featuredImage.fields.file.url}`} alt={title} />\r\n        </div>\r\n        <h2>{title}</h2>\r\n      </div>\r\n\r\n      <div className='cooking-info'>\r\n        <p>Take about {cookingTime} mins to cook.</p>\r\n        <h3>Ingredients:</h3>\r\n\r\n        {ingredients.map((ing) => (\r\n          <span key={ing}>{ing}</span>\r\n        ))}\r\n      </div>\r\n\r\n      <div className='method-box'>\r\n        <h3>Method:</h3>\r\n        <div className='method'>{documentToReactComponents(method)}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleRecipe;\r\n","import {\r\n  SINGLE_RECIPE_FAIL,\r\n  SINGLE_RECIPE_REQUEST,\r\n  SINGLE_RECIPE_SUCCESS,\r\n} from '../constants/recipeConstants';\r\nimport { createClient } from 'contentful';\r\n\r\nexport const fetchSingleRecipe = (recipe_id) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({ type: SINGLE_RECIPE_REQUEST });\r\n\r\n      const client = createClient({\r\n        space: process.env.REACT_APP_CONTENTFUL_SPACE_ID,\r\n        accessToken: process.env.REACT_APP_CONTENTFUL_ACCESS_KEY,\r\n      });\r\n\r\n      // Retrieve recipe entries that match recipe id\r\n      const response = await client.getEntries({\r\n        content_type: 'recipe',\r\n        'fields.slug': recipe_id,\r\n      });\r\n\r\n      // Extract the recipe item from the response array\r\n      const recipe = response.items[0];\r\n\r\n      dispatch({ type: SINGLE_RECIPE_SUCCESS, payload: recipe });\r\n    } catch (error) {\r\n      dispatch({ type: SINGLE_RECIPE_FAIL, payload: error.message });\r\n    }\r\n  };\r\n};\r\n","/**\n * Map of all Contentful block types. Blocks contain inline or block nodes.\n */\nexport enum BLOCKS {\n  DOCUMENT = 'document',\n  PARAGRAPH = 'paragraph',\n\n  HEADING_1 = 'heading-1',\n  HEADING_2 = 'heading-2',\n  HEADING_3 = 'heading-3',\n  HEADING_4 = 'heading-4',\n  HEADING_5 = 'heading-5',\n  HEADING_6 = 'heading-6',\n\n  OL_LIST = 'ordered-list',\n  UL_LIST = 'unordered-list',\n  LIST_ITEM = 'list-item',\n\n  HR = 'hr',\n  QUOTE = 'blockquote',\n\n  EMBEDDED_ENTRY = 'embedded-entry-block',\n  EMBEDDED_ASSET = 'embedded-asset-block',\n  EMBEDDED_RESOURCE = 'embedded-resource-block',\n\n  TABLE = 'table',\n  TABLE_ROW = 'table-row',\n  TABLE_CELL = 'table-cell',\n  TABLE_HEADER_CELL = 'table-header-cell',\n}\n","/**\n * Map of all Contentful inline types. Inline contain inline or text nodes.\n */\nexport enum INLINES {\n  HYPERLINK = 'hyperlink',\n  ENTRY_HYPERLINK = 'entry-hyperlink',\n  ASSET_HYPERLINK = 'asset-hyperlink',\n  EMBEDDED_ENTRY = 'embedded-entry-inline',\n}\n","/**\n * Map of all Contentful marks.\n */\nenum MARKS {\n  BOLD = 'bold',\n  ITALIC = 'italic',\n  UNDERLINE = 'underline',\n  CODE = 'code',\n  SUPERSCRIPT = 'superscript',\n  SUBSCRIPT = 'subscript',\n}\n\nexport default MARKS;\n","import { BLOCKS } from './blocks';\nimport { INLINES } from './inlines';\nimport MARKS from './marks';\n\nexport type TopLevelBlockEnum =\n  | BLOCKS.PARAGRAPH\n  | BLOCKS.HEADING_1\n  | BLOCKS.HEADING_2\n  | BLOCKS.HEADING_3\n  | BLOCKS.HEADING_4\n  | BLOCKS.HEADING_5\n  | BLOCKS.HEADING_6\n  | BLOCKS.OL_LIST\n  | BLOCKS.UL_LIST\n  | BLOCKS.HR\n  | BLOCKS.QUOTE\n  | BLOCKS.EMBEDDED_ENTRY\n  | BLOCKS.EMBEDDED_ASSET\n  | BLOCKS.EMBEDDED_RESOURCE\n  | BLOCKS.TABLE;\n\n/**\n * Array of all top level block types.\n * Only these block types can be the direct children of the document.\n */\nexport const TOP_LEVEL_BLOCKS: TopLevelBlockEnum[] = [\n  BLOCKS.PARAGRAPH,\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n  BLOCKS.OL_LIST,\n  BLOCKS.UL_LIST,\n  BLOCKS.HR,\n  BLOCKS.QUOTE,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  BLOCKS.EMBEDDED_RESOURCE,\n  BLOCKS.TABLE,\n];\n\nexport type ListItemBlockEnum =\n  | BLOCKS.PARAGRAPH\n  | BLOCKS.HEADING_1\n  | BLOCKS.HEADING_2\n  | BLOCKS.HEADING_3\n  | BLOCKS.HEADING_4\n  | BLOCKS.HEADING_5\n  | BLOCKS.HEADING_6\n  | BLOCKS.OL_LIST\n  | BLOCKS.UL_LIST\n  | BLOCKS.HR\n  | BLOCKS.QUOTE\n  | BLOCKS.EMBEDDED_ENTRY\n  | BLOCKS.EMBEDDED_ASSET\n  | BLOCKS.EMBEDDED_RESOURCE;\n\n/**\n * Array of all allowed block types inside list items\n */\nexport const LIST_ITEM_BLOCKS: TopLevelBlockEnum[] = [\n  BLOCKS.PARAGRAPH,\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n  BLOCKS.OL_LIST,\n  BLOCKS.UL_LIST,\n  BLOCKS.HR,\n  BLOCKS.QUOTE,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  BLOCKS.EMBEDDED_RESOURCE,\n];\n\nexport const TABLE_BLOCKS = [\n  BLOCKS.TABLE,\n  BLOCKS.TABLE_ROW,\n  BLOCKS.TABLE_CELL,\n  BLOCKS.TABLE_HEADER_CELL,\n];\n\n/**\n * Array of all void block types\n */\nexport const VOID_BLOCKS = [\n  BLOCKS.HR,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  BLOCKS.EMBEDDED_RESOURCE,\n];\n\n/**\n * Dictionary of all container block types, and the set block types they accept as children.\n *\n * Note: This does not include `[BLOCKS.DOCUMENT]: TOP_LEVEL_BLOCKS`\n */\nexport const CONTAINERS = {\n  [BLOCKS.OL_LIST]: [BLOCKS.LIST_ITEM],\n  [BLOCKS.UL_LIST]: [BLOCKS.LIST_ITEM],\n  [BLOCKS.LIST_ITEM]: LIST_ITEM_BLOCKS,\n  [BLOCKS.QUOTE]: [BLOCKS.PARAGRAPH],\n  [BLOCKS.TABLE]: [BLOCKS.TABLE_ROW],\n  [BLOCKS.TABLE_ROW]: [BLOCKS.TABLE_CELL, BLOCKS.TABLE_HEADER_CELL],\n  [BLOCKS.TABLE_CELL]: [BLOCKS.PARAGRAPH],\n  [BLOCKS.TABLE_HEADER_CELL]: [BLOCKS.PARAGRAPH],\n};\n\n/**\n * Array of all heading levels\n */\nexport const HEADINGS = [\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n];\n\n/**\n * Array of all block types that may contain text and inline nodes.\n */\nexport const TEXT_CONTAINERS = [BLOCKS.PARAGRAPH, ...HEADINGS];\n\n/**\n * Node types before `tables` release.\n */\nexport const V1_NODE_TYPES = [\n  BLOCKS.DOCUMENT,\n  BLOCKS.PARAGRAPH,\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n  BLOCKS.OL_LIST,\n  BLOCKS.UL_LIST,\n  BLOCKS.LIST_ITEM,\n  BLOCKS.HR,\n  BLOCKS.QUOTE,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  INLINES.HYPERLINK,\n  INLINES.ENTRY_HYPERLINK,\n  INLINES.ASSET_HYPERLINK,\n  INLINES.EMBEDDED_ENTRY,\n  'text',\n];\n\n/**\n * Marks before `superscript` & `subscript` release.\n */\nexport const V1_MARKS = [MARKS.BOLD, MARKS.CODE, MARKS.ITALIC, MARKS.UNDERLINE];\n","import { Document } from './types';\nimport { BLOCKS } from './blocks';\n\n/**\n * A rich text document considered to be empty.\n * Any other document structure than this is not considered empty.\n */\nconst EMPTY_DOCUMENT: Document = {\n  nodeType: BLOCKS.DOCUMENT,\n  data: {},\n  content: [\n    {\n      nodeType: BLOCKS.PARAGRAPH,\n      data: {},\n      content: [\n        {\n          nodeType: 'text',\n          value: '',\n          marks: [],\n          data: {},\n        },\n      ],\n    },\n  ],\n};\n\nexport default EMPTY_DOCUMENT;\n","import { Node, Block, Inline, Text } from './types';\nimport { BLOCKS } from './blocks';\nimport { INLINES } from './inlines';\n\n/**\n * Tiny replacement for Object.values(object).includes(key) to\n * avoid including CoreJS polyfills\n */\nfunction hasValue(obj: Record<string, unknown>, value: unknown) {\n  for (const key of Object.keys(obj)) {\n    if (value === obj[key]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Checks if the node is an instance of Inline.\n */\nexport function isInline(node: Node): node is Inline {\n  return hasValue(INLINES, node.nodeType);\n}\n\n/**\n * Checks if the node is an instance of Block.\n */\nexport function isBlock(node: Node): node is Block {\n  return hasValue(BLOCKS, node.nodeType);\n}\n\n/**\n * Checks if the node is an instance of Text.\n */\nexport function isText(node: Node): node is Text {\n  return node.nodeType === 'text';\n}\n","export { BLOCKS } from './blocks';\nexport { INLINES } from './inlines';\nexport { default as MARKS } from './marks';\n\nexport * from './schemaConstraints';\n\nexport * from './types';\nexport * from './nodeTypes';\n\nexport { default as EMPTY_DOCUMENT } from './emptyDocument';\n\nimport * as helpers from './helpers';\nexport { helpers };\n","import React, { ReactNode } from 'react';\nimport { helpers, Mark } from '@contentful/rich-text-types';\nimport { CommonNode, Options } from '..';\nimport { appendKeyToValidElement } from './appendKeyToValidElement';\n\nexport function nodeListToReactComponents(nodes: CommonNode[], options: Options): ReactNode {\n  return nodes.map((node: CommonNode, index: number): ReactNode => {\n    return appendKeyToValidElement(nodeToReactComponent(node, options), index);\n  });\n}\n\nexport function nodeToReactComponent(node: CommonNode, options: Options): ReactNode {\n  const { renderNode, renderMark, renderText } = options;\n  if (helpers.isText(node)) {\n    return node.marks.reduce(\n      (value: ReactNode, mark: Mark): ReactNode => {\n        if (!renderMark[mark.type]) {\n          return value;\n        }\n        return renderMark[mark.type](value);\n      },\n      renderText ? renderText(node.value) : node.value,\n    );\n  } else {\n    const children: ReactNode = nodeListToReactComponents(node.content, options);\n    if (!node.nodeType || !renderNode[node.nodeType]) {\n      return <>{children}</>;\n    }\n    return renderNode[node.nodeType](node, children);\n  }\n}\n","import { cloneElement, isValidElement, ReactNode } from 'react';\n\nexport function appendKeyToValidElement(element: ReactNode, key: number): ReactNode {\n  if (isValidElement(element) && element.key === null) {\n    return cloneElement(element, { key });\n  }\n  return element;\n}\n","import React, { ReactNode } from 'react';\nimport { Block, BLOCKS, Document, Inline, INLINES, MARKS, Text } from '@contentful/rich-text-types';\nimport { nodeToReactComponent } from './util/nodeListToReactComponents';\n\nconst defaultNodeRenderers: RenderNode = {\n  [BLOCKS.DOCUMENT]: (node, children) => children,\n  [BLOCKS.PARAGRAPH]: (node, children) => <p>{children}</p>,\n  [BLOCKS.HEADING_1]: (node, children) => <h1>{children}</h1>,\n  [BLOCKS.HEADING_2]: (node, children) => <h2>{children}</h2>,\n  [BLOCKS.HEADING_3]: (node, children) => <h3>{children}</h3>,\n  [BLOCKS.HEADING_4]: (node, children) => <h4>{children}</h4>,\n  [BLOCKS.HEADING_5]: (node, children) => <h5>{children}</h5>,\n  [BLOCKS.HEADING_6]: (node, children) => <h6>{children}</h6>,\n  [BLOCKS.EMBEDDED_ENTRY]: (node, children) => <div>{children}</div>,\n  [BLOCKS.UL_LIST]: (node, children) => <ul>{children}</ul>,\n  [BLOCKS.OL_LIST]: (node, children) => <ol>{children}</ol>,\n  [BLOCKS.LIST_ITEM]: (node, children) => <li>{children}</li>,\n  [BLOCKS.QUOTE]: (node, children) => <blockquote>{children}</blockquote>,\n  [BLOCKS.HR]: () => <hr />,\n  [BLOCKS.TABLE]: (node, children) => (\n    <table>\n      <tbody>{children}</tbody>\n    </table>\n  ),\n  [BLOCKS.TABLE_ROW]: (node, children) => <tr>{children}</tr>,\n  [BLOCKS.TABLE_HEADER_CELL]: (node, children) => <th>{children}</th>,\n  [BLOCKS.TABLE_CELL]: (node, children) => <td>{children}</td>,\n  [INLINES.ASSET_HYPERLINK]: (node) => defaultInline(INLINES.ASSET_HYPERLINK, node as Inline),\n  [INLINES.ENTRY_HYPERLINK]: (node) => defaultInline(INLINES.ENTRY_HYPERLINK, node as Inline),\n  [INLINES.EMBEDDED_ENTRY]: (node) => defaultInline(INLINES.EMBEDDED_ENTRY, node as Inline),\n  [INLINES.HYPERLINK]: (node, children) => <a href={node.data.uri}>{children}</a>,\n};\n\nconst defaultMarkRenderers: RenderMark = {\n  [MARKS.BOLD]: (text) => <b>{text}</b>,\n  [MARKS.ITALIC]: (text) => <i>{text}</i>,\n  [MARKS.UNDERLINE]: (text) => <u>{text}</u>,\n  [MARKS.CODE]: (text) => <code>{text}</code>,\n  [MARKS.SUPERSCRIPT]: (text) => <sup>{text}</sup>,\n  [MARKS.SUBSCRIPT]: (text) => <sub>{text}</sub>,\n};\n\nfunction defaultInline(type: string, node: Inline): ReactNode {\n  return (\n    <span key={node.data.target.sys.id}>\n      type: {node.nodeType} id: {node.data.target.sys.id}\n    </span>\n  );\n}\n\nexport type CommonNode = Text | Block | Inline;\n\nexport interface NodeRenderer {\n  (node: Block | Inline, children: ReactNode): ReactNode;\n}\n\nexport interface RenderNode {\n  [k: string]: NodeRenderer;\n}\n\nexport interface RenderMark {\n  [k: string]: (text: ReactNode) => ReactNode;\n}\n\nexport interface RenderText {\n  (text: string): ReactNode;\n}\n\nexport interface Options {\n  /**\n   * Node renderers\n   */\n  renderNode?: RenderNode;\n  /**\n   * Mark renderers\n   */\n  renderMark?: RenderMark;\n  /**\n   * Text renderer\n   */\n  renderText?: RenderText;\n}\n\n/**\n * Serialize a Contentful Rich Text `document` to React tree\n */\nexport function documentToReactComponents(\n  richTextDocument: Document,\n  options: Options = {},\n): ReactNode {\n  if (!richTextDocument) {\n    return null;\n  }\n\n  return nodeToReactComponent(richTextDocument, {\n    renderNode: {\n      ...defaultNodeRenderers,\n      ...options.renderNode,\n    },\n    renderMark: {\n      ...defaultMarkRenderers,\n      ...options.renderMark,\n    },\n    renderText: options.renderText,\n  });\n}\n"],"names":["className","useSelector","state","recipe","loading","error","dispatch","useDispatch","slug","useParams","useEffect","recipe_id","type","SINGLE_RECIPE_REQUEST","client","createClient","space","process","accessToken","getEntries","content_type","response","items","SINGLE_RECIPE_SUCCESS","payload","SINGLE_RECIPE_FAIL","message","Loader","fields","title","cookingTime","ingredients","featuredImage","method","src","file","url","alt","map","ing","documentToReactComponents","BLOCKS","exports","INLINES","MARKS","blocks_1","PARAGRAPH","HEADING_1","HEADING_2","HEADING_3","HEADING_4","HEADING_5","HEADING_6","OL_LIST","UL_LIST","HR","QUOTE","EMBEDDED_ENTRY","EMBEDDED_ASSET","EMBEDDED_RESOURCE","TABLE","TABLE_ROW","TABLE_CELL","TABLE_HEADER_CELL","_a","LIST_ITEM","__spreadArray","DOCUMENT","inlines_1","HYPERLINK","ENTRY_HYPERLINK","ASSET_HYPERLINK","marks_1","BOLD","CODE","ITALIC","UNDERLINE","EMPTY_DOCUMENT","nodeType","data","content","value","marks","hasValue","obj","Object","keys","_i","node","enumerable","get","default","__exportStar","nodeListToReactComponents","nodes","options","index","element","nodeToReactComponent","key","isValidElement","cloneElement","renderNode","renderMark","renderText","helpers","isText","reduce","mark","children","React","defaultNodeRenderers","defaultInline","href","uri","defaultMarkRenderers","text","_b","SUPERSCRIPT","SUBSCRIPT","target","sys","id","richTextDocument"],"sourceRoot":""}